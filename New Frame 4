/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pkgtry;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.time.LocalDateTime;
import javax.swing.JOptionPane;
import java.util.Random;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

/**
 *
 * @author COREi5
 */
public class NewJFrame5 extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form NewJFrame5
     */
    public NewJFrame5() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(0, 0, 0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Showcard Gothic", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 102, 0));
        jButton1.setText("Run ipconfig");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setFont(new java.awt.Font("Showcard Gothic", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 102, 0));
        jButton2.setText(" PRA No. 10175 or “Cybercrime Prevention Act of 2012   \n");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setFont(new java.awt.Font("Showcard Gothic", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 102, 0));
        jButton3.setText("Brute Force Attack");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 0, 0));
        jButton4.setFont(new java.awt.Font("Showcard Gothic", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 102, 0));
        jButton4.setText("Run Port Scanner");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("Showcard Gothic", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(0, 102, 0));
        jButton5.setText("Key Logger");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 0, 0));
        jButton6.setFont(new java.awt.Font("Showcard Gothic", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(0, 102, 0));
        jButton6.setText("Start File Server");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(0, 0, 0));
        jButton7.setFont(new java.awt.Font("Showcard Gothic", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(0, 102, 0));
        jButton7.setText("EXIT PROGRAM");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(481, 481, 481))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(476, 476, 476)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(381, 381, 381)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(392, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    JOptionPane.showMessageDialog(this, """
                    Philippine Republic Act No. 10175 or “Cybercrime Prevention Act of 2012”                    
                                                                                                          
         The Cybercrime Prevention Act of 2012 focuses on the pre-emption, prevention, and prosecution of     
     cybercrimes such as offenses against the privacy, confidentiality, integrity, and availability of    
     computer data and systems, computer-related offenses, and content-related offenses. Penalties. Any 
     person found guilty of any of the punishable acts enumerated in Sections 4(a) and 4(b) of this Act 
     shall be punished with imprisonment of prison mayor or a fine of at least two hundred thousand                 
     pesos (PhP200,000.00) up to a maximum amount commensurate to the damage Incurred or both.                                          
                              " This is For Educational Purposes  Only """, "Objective", JOptionPane.INFORMATION_MESSAGE);

    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    String password = JOptionPane.showInputDialog(this, "Enter The Password:");
        if (password != null && !password.isEmpty()) {
            StringBuilder result = new StringBuilder("BRUTEFORCE ATTACK\n\n");
            result.append("""
                    A brute force attack is a hacking method that uses trial and error to crack passwords,
                    login credentials, and encryption keys. It is a simple yet reliable tactic for gaining unauthorized access
                    to individual accounts and organizations' systems and networks.

                    ============================ ENTER TO CONTINUE =======================
                    """);
            String enter = JOptionPane.showInputDialog(this, result.toString(), "Brute Force Attack", JOptionPane.INFORMATION_MESSAGE);
            if (enter != null) {
                bruteForce(password);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid Password", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void bruteForce(String password) {
        String chars = "1234567890";
        char[] allChars = chars.toCharArray();
        char[] samplePwd = new char[password.length()];
        Random random = new Random();

        while (true) {
            for (int i = 0; i < password.length(); i++) {
                samplePwd[i] = allChars[random.nextInt(allChars.length)];
            }
            System.out.println("010101010" + String.valueOf(samplePwd) + "101010101");
            if (String.valueOf(samplePwd).equals(password)) {
                JOptionPane.showMessageDialog(this, "The Password Match is : " + String.valueOf(samplePwd), "Brute Force Attack Result", JOptionPane.INFORMATION_MESSAGE);
                break;
            }
        }
    }                                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    try {
            Process process = new ProcessBuilder("ipconfig").start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
            int exitCode = process.waitFor();
            if (exitCode == 0) {
                JOptionPane.showMessageDialog(this, output.toString(), "IP Configuration", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Command failed with exit code: " + exitCode, "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException | InterruptedException e) {
            JOptionPane.showMessageDialog(this, "An error occurred", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    String target = JOptionPane.showInputDialog(null, "Enter Target IP Address:");
        
    if (target != null && !target.isEmpty()) {
        StringBuilder result = new StringBuilder();
        result.append("====================================================\n");
        result.append(String.format("Scanning Target : %s\n", target));
        result.append(String.format("Scanning started at: %s\n", LocalDateTime.now()));
        result.append("====================================================\n");
            
        int minPort = 1;
        int maxPort = 200; // You can change the maximum port number as per your requirement
        
        for (int port = minPort; port <= maxPort; port++) {
            try (Socket socket = new Socket()) {
                socket.connect(new InetSocketAddress(target, port), 100);
                result.append(String.format("[*] Port %d is open\n", port));
            } catch (IOException ex) {
                // Handle exceptions specific to individual port connection attempts
                result.append(String.format("[*] Port %d is closed\n", port));
            }
        }
        
        JOptionPane.showMessageDialog(null, result.toString(), "Port Scanner Result", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(null, "Invalid Target IP Address", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }                                        

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    StringBuilder result = new StringBuilder("KEY LOGGER\n\n");
    result.append("A keylogger is a type of spyware that monitors and records user keystrokes.\n");
    result.append("They allow cybercriminals to read anything a victim is typing into their keyboard, including private data like\n");
    result.append("passwords, account numbers, and credit card numbers.\n\n");
    result.append("============================ ENTER TO CONTINUE ==========================\n");
        
    String enter = JOptionPane.showInputDialog(null, result.toString(), "Key Logger", JOptionPane.INFORMATION_MESSAGE);
        
    if (enter != null) {
        result = new StringBuilder("Ways to Protect Yourself Against Keyloggers\n\n");
        result.append("1. Real-time, always-on antivirus/anti-malware protection\n");
        result.append("2. Use Firewall\n");
        result.append("3. Install a Password Manager\n");
        result.append("4. Update Your System (And Keep It That Way)\n");
        result.append("5. Consider Additional Security Tools\n");
        result.append("6. Change Your Passwords\n\n");
            
        Logger logger = Logger.getLogger(MainFrame.class.getName());
        try {
            FileHandler fh = new FileHandler("CPE_2203.txt");
            logger.addHandler(fh);
            SimpleFormatter formatter = new SimpleFormatter();
            fh.setFormatter(formatter);
                
            JOptionPane.showMessageDialog(null, "Press ENTER to start logging, or type 'done' to exit...", "Key Logger", JOptionPane.INFORMATION_MESSAGE);
            startLogging(logger);
        } catch (IOException | SecurityException e) {
            JOptionPane.showMessageDialog(null, "An error occurred", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}

private void startLogging(Logger logger) {
    int enterCount = 0;
    try {
        while (true) {
            String key = JOptionPane.showInputDialog(this, null);
            if (key == null || key.equalsIgnoreCase("done")) {
                JOptionPane.showMessageDialog(this, "Logging stopped.", "Key Logger", JOptionPane.INFORMATION_MESSAGE);
                break;
            }
            logger.info(key);
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }                                        

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    StringBuilder result = new StringBuilder("HOST FILE IN A SERVER\n\n");
    result.append("A file server is a computer responsible for the storage and management of data files\n");
    result.append("so that other computers on the same network can access the files.\n");
    result.append("It enables users to share information over a network without having to physically transfer files.\n\n");
    result.append("============================ ENTER TO CONTINUE ==========================\n");
    String enter = JOptionPane.showInputDialog(this, result.toString(), "File Server", JOptionPane.INFORMATION_MESSAGE);
    if (enter != null) {
        result = new StringBuilder("Tips to Increase Security on Web Hosting Servers\n\n");
        result.append("1. Turn Off Unnecessary Services\n");
        result.append("2. Keep Software Up-To-Date\n");
        result.append("3. Install Malware Scanning Software\n");
        result.append("4. Install And Configure The CSF Firewall\n");
        result.append("5. Use Public Key Authentication For SSH\n");
        result.append("6. Strong Passwords\n\n");
        try {
            int port = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter the port number to start the file server:"));
            startFileServer(port);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid port number.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}

private void startFileServer(int port) {
    try (ServerSocket serverSocket = new ServerSocket(port)) {
        JOptionPane.showMessageDialog(this, "File server started on port " + port, "File Server", JOptionPane.INFORMATION_MESSAGE);
        while (true) {
            Socket clientSocket = serverSocket.accept();
            System.out.println("Client connected: " + clientSocket.getInetAddress());
            new Thread(() -> handleClientRequest(clientSocket)).start();
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "An error occurred", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

private void handleClientRequest(Socket clientSocket) {
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
         PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true)) {

        String fileName = reader.readLine(); // Read the requested file name from the client

        // Assuming the files are located in a directory named "files" relative to the server's location
        File file = new File("files/" + fileName);

        if (file.exists() && file.isFile()) {
            writer.println("FOUND");
            try (BufferedReader fileReader = new BufferedReader(new FileReader(file))) {
                String line;
                while ((line = fileReader.readLine()) != null) {
                    writer.println(line); // Send the file content line by line to the client
                }
            }
        } else {
            writer.println("NOT_FOUND");
        }

    } catch (IOException e) {
        // Print the stack trace for debugging purposes
        
    } finally {
        try {
            clientSocket.close(); // Close the client socket
        } catch (IOException e) {
            e.printStackTrace(); // Print the stack trace for debugging purposes
        }
    }
    }                                        

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    System.exit(0);
    }                                        

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame5().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    // End of variables declaration                   
}
